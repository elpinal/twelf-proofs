%% Admissibility of cuts in intuitionistic sequent calculus.
%% http://twelf.org/wiki/Admissibility_of_cut

prop : type.
/\ : prop -> prop -> prop. %infix right 30 /\.
\/ : prop -> prop -> prop. %infix right 20 \/.
=> : prop -> prop -> prop. %infix right 10 =>.
top : prop.
bot : prop.

hyp : prop -> type.
conc : prop -> type.

ax : hyp A -> conc A.

/\R : conc A -> conc B -> conc (A /\ B).
/\1L : (hyp A -> conc C) -> (hyp (A /\ B) -> conc C).
/\2L : (hyp B -> conc C) -> (hyp (A /\ B) -> conc C).

\/1R : conc A -> conc (A \/ B).
\/2R : conc B -> conc (A \/ B).
\/L : (hyp A -> conc C) -> (hyp B -> conc C) -> (hyp (A \/ B) -> conc C).

=>R : (hyp A -> conc B) -> conc (A => B).
=>L : conc A -> (hyp B -> conc C) -> (hyp (A => B) -> conc C).

topR : conc top.

botL : (hyp bot -> conc A).


cut : {A:prop} {D:conc A} {E:hyp A -> conc C} {F:conc C} type.
%mode cut +A +D +E -F.

%% Initial cuts.

axD : cut A (ax H) E (E H).
axE : cut A D ax D.
closed : cut A D ([_] E') E'.

%% Principal cuts.

/\1C : cut (A /\ B) (/\R D1 D2) ([h] /\1L (E' h) h) F
        <- ({h':hyp A} cut (A /\ B) (/\R D1 D2) ([h] E' h h') (F' h'))
        <- cut A D1 F' F.
/\2C : cut (A /\ B) (/\R D1 D2) ([h] /\2L (E' h) h) F
        <- ({h':hyp B} cut (A /\ B) (/\R D1 D2) ([h] E' h h') (F' h'))
        <- cut B D2 F' F.
\/1C : cut (A \/ B) (\/1R D') ([h] \/L (E1 h) (E2 h) h) F
        <- ({h':hyp A} cut (A \/ B) (\/1R D') ([h] E1 h h') (F1 h'))
        <- cut A D' F1 F.
\/2C : cut (A \/ B) (\/2R D') ([h] \/L (E1 h) (E2 h) h) F
        <- ({h':hyp B} cut (A \/ B) (\/2R D') ([h] E2 h h') (F2 h'))
        <- cut B D' F2 F.
=>C : cut (A => B) (=>R D') ([h] =>L (E1 h) (E2 h) h) F
       <- cut (A => B) (=>R D') E1 F1
       <- ({h':hyp B} cut (A => B) (=>R D') ([h] E2 h h') (F2 h'))
       <- cut A F1 D' F1'
       <- cut B F1' F2 F.

%% Left-commutative cuts.

/\1LLC : cut A (/\1L D' H) E (/\1L F H)
          <- ({h} cut A (D' h) E (F h)).
/\2LLC : cut A (/\2L D' H) E (/\2L F H)
          <- ({h} cut A (D' h) E (F h)).
\/LLC : cut A (\/L D1 D2 H) E (\/L F1 F2 H)
         <- ({h} cut A (D1 h) E (F1 h))
         <- ({h} cut A (D2 h) E (F2 h)).
=>LLC : cut A (=>L D1 D2 H) E (=>L D1 F H)
         <- ({h} cut A (D2 h) E (F h)).
botLLC : cut A (botL H) E (botL H).

%% Right-commutative cuts.

/\RRC : cut A D ([h:hyp A] /\R (E1 h) (E2 h)) (/\R F1 F2)
         <- cut A D E1 F1
         <- cut A D E2 F2.
\/1RRC : cut A D ([h:hyp A] \/1R (E' h)) (\/1R F')
          <- cut A D E' F'.
\/2RRC : cut A D ([h:hyp A] \/2R (E' h)) (\/2R F')
          <- cut A D E' F'.
=>RRC : cut A D ([h:hyp A] =>R (E' h)) (=>R F')
         <- ({h':hyp B} cut A D ([h:hyp A] E' h h') (F' h')).
topRRC : cut A D ([_:hyp A] topR) topR.


/\1LRC : cut A D ([h:hyp A] /\1L ([h':hyp B] E' h h') H) (/\1L F' H)
          <- ({h':hyp B} cut A D ([h:hyp A] E' h h') (F' h')).
/\2LRC : cut A D ([h:hyp A] /\2L ([h':hyp B] E' h h') H) (/\2L F' H)
          <- ({h':hyp B} cut A D ([h:hyp A] E' h h') (F' h')).
\/LRC : cut A D ([h:hyp A] \/L ([h1:hyp B] E1 h h1) ([h2:hyp C] E2 h h2) H) (\/L F1 F2 H)
         <- ({h1:hyp B} cut A D ([h:hyp A] E1 h h1) (F1 h1))
         <- ({h2:hyp C} cut A D ([h:hyp A] E2 h h2) (F2 h2)).
=>LRC : cut A D ([h:hyp A] =>L (E1 h) ([h':hyp B] E2 h h') H) (=>L F1 F2 H)
         <- cut A D E1 F1
         <- ({h':hyp B} cut A D ([h:hyp A] E2 h h') (F2 h')).
botLRC : cut A D ([_:hyp A] botL H) (botL H).

%block hyp : some {A:prop} block {_:hyp A}.

%worlds (hyp) (cut _ _ _ _).
%total {A [D E]} (cut A D E _).
